// Generated by CoffeeScript 1.9.3

/**
 * api
 * @module cnode/api
 * @author vfasky <vfasky@gmail.com>
 */

(function() {
  define('cnode/api', ['jquery'], function($) {
    "use strict";
    var _host, exports;
    _host = 'https://cnodejs.org/api/v1';
    return exports = {
      topics: function(data) {
        if (data == null) {
          data = {};
        }
        data = $.extend({
          mdrender: false,
          limit: 10
        }, data);
        return $.get(_host + '/topics', data);
      },
      topic: function(id) {
        return $.get(_host + '/topic/' + id, {
          mdrender: false
        });
      }
    };
  });

}).call(this);

;
// Generated by CoffeeScript 1.9.3

/**
 * 启动
 * @module cnode/bootstrap
 * @author vfasky <vfasky@gmail.com>
 */

(function() {
  define('cnode', ['jquery', 'mcore', 'tag'], function($, mcore) {
    "use strict";
    var init;
    init = false;
    return function(select, loadSelect) {
      var app;
      app = new mcore.App($(select));
      app.route('/topic/:id', 'cnode/topic').route('*', 'cnode/index');
      app.on('runView', function() {
        if (init === false) {
          init = true;
          return $(loadSelect).remove();
        }
      });
      return app.run();
    };
  });

}).call(this);

;
// Generated by CoffeeScript 1.9.3

/**
 * 过滤函数
 * @module cnode/formatters
 * @author vfasky <vfasky@gmail.com>
 */

(function() {
  define('cnode/formatters', ['mcore', 'moment', 'markdown-it'], function(mcore, moment, Markdownit) {
    "use strict";
    var Template, markdown;
    Template = mcore.Template;
    markdown = new Markdownit({
      html: false,
      xhtmlOut: false,
      breaks: true,
      langPrefix: 'language-',
      linkify: true,
      typographer: false
    });
    Template.formatters('dateFormat', function(value, format) {
      if (format == null) {
        format = 'YYYY-MM-DD';
      }
      return moment(value).format(format);
    });
    Template.formatters('fromNow', function(value) {
      return moment(value).fromNow();
    });
    return Template.formatters('markdown', function(value) {
      return markdown.render(value);
    });
  });

}).call(this);

;
// Generated by CoffeeScript 1.9.3

/**
 *
 * @module cnode/topic
 * @author vfasky <vfasky@gmail.com>
 */

(function() {
  define('cnode/topic', ['jquery', 'cnode/view', 'mcore-attr/scroller', 'cnode/formatters'], function($, View) {
    "use strict";
    return View.subclass({
      constructor: View.prototype.constructor,
      run: function(id) {
        return this.render('cnode/topic.html', {
          topic: this.api.topic(id)
        });
      }
    });
  });

}).call(this);

;
// Generated by CoffeeScript 1.9.3

/**
 * 
 * @module cnode/view
 * @author vfasky <vfasky@gmail.com>
 */

(function() {
  define('cnode/view', ['jquery', 'mcore', 'cnode/api'], function($, mcore, api) {
    "use strict";
    return mcore.View.subclass({
      constructor: mcore.View.prototype.constructor,
      beforeInit: function() {
        return this.api = api;
      }
    });
  });

}).call(this);

;
// Generated by CoffeeScript 1.9.3

/**
 * 首页
 * @module cnode/index
 * @author vfasky <vfasky@gmail.com>
 */

(function() {
  define('cnode/index', ['jquery', 'cnode/view', 'mcore-attr/scroller', 'cnode/formatters'], function($, View) {
    "use strict";
    return View.subclass({
      constructor: View.prototype.constructor,
      run: function(tab) {
        this.page = 1;
        return this.render('cnode/index.html', {
          topics: this.getTopics(this.page),
          loadPageDone: true
        });
      },
      getTopics: function(page) {
        if (page == null) {
          page = 1;
        }
        return this.cache("indexTopics" + page, this.api.topics({
          page: page
        }), {
          storage: 'memory'
        });
      },
      watch: function() {
        return this.$el.on('scrollend', (function(_this) {
          return function() {
            var topics;
            if (_this.get('loadPageDone') === false) {
              return;
            }
            _this.set('loadPageDone', false);
            topics = _this.clone(_this.get('topics'));
            return _this.api.topics({
              page: _this.page + 1
            }).done(function(res) {
              _this.page++;
              res.data.map(function(v) {
                return topics.data.push(v);
              });
              return _this.set('topics', topics);
            }).always(function() {
              return _this.set('loadPageDone', true);
            });
          };
        })(this));
      }
    });
  });

}).call(this);
