// Generated by CoffeeScript 1.9.3

/**
 * 模板
 * @module mcore/template
 * @author vfasky <vfasky@gmail.com>
 */

(function() {
  var slice = [].slice;

  define('mcore/template', ['jquery', 'rivets', 'mcore/util', 'stapes'], function($, rivets, util, Stapes) {
    "use strict";
    var Template;
    rivets.adapters[':'] = {
      observe: function(obj, keypath, callback) {
        obj.on('change:' + keypath, callback);
      },
      unobserve: function(obj, keypath, callback) {
        obj.off('change:' + keypath, callback);
      },
      get: function(obj, keypath) {
        return obj.get(keypath);
      },
      set: function(obj, keypath, value) {
        obj.set(keypath, value);
      }
    };
    rivets.configure({
      rootInterface: '.',
      handler: function(target, event, binding) {
        var ref;
        ref = this.call(binding.view.models.self, target, event);
        if (false !== ref) {
          return;
        }
        if (event.stopPropagation && event.preventDefault) {
          event.stopPropagation();
          return event.preventDefault();
        } else {
          window.event.cancelBubble = true;
          return window.event.returnValue = false;
        }
      }
    });

    /**
     * Formatters
     */
    rivets.formatters['nl2br'] = function(value) {
      if (!value) {
        return '';
      }
      return String(value).trim().replace(/<[^>]+>/g, "").replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + '<br/>' + '$2');
    };
    rivets.formatters['link'] = function(value, join) {
      if (!value) {
        return '';
      }
      return String(value) + String(join);
    };
    rivets.formatters['and'] = function(value, show) {
      if (!value) {
        return value;
      }
      return show;
    };
    rivets.formatters['or'] = function(value, show) {
      if (value) {
        return value;
      }
      return show;
    };
    rivets.formatters['slice'] = function(value, start, end) {
      if (Array.isArray(value)) {
        return [];
      }
      return value.slice(start, end);
    };
    rivets.formatters['substr'] = function(value, start, end) {
      if (!value) {
        return '';
      }
      return String(value).substring(start, end);
    };
    rivets.formatters['len'] = function(value) {
      if (Array.isArray(value)) {
        return value.length;
      }
      if (!value) {
        return 0;
      }
      return String(value).length;
    };
    rivets.formatters['eq'] = function(value, x) {
      return value === x;
    };
    rivets.formatters['<'] = function(value, x) {
      return Number(value) < Number(x);
    };
    rivets.formatters['<='] = function(value, x) {
      return Number(value) <= Number(x);
    };
    rivets.formatters['=='] = function(value, x) {
      return Number(value) === Number(x);
    };
    rivets.formatters['>='] = function(value, x) {
      return Number(value) >= Number(x);
    };
    rivets.formatters['>'] = function(value, x) {
      return Number(value) > Number(x);
    };
    rivets.formatters['+'] = function(value, x) {
      return Number(value) + Number(x);
    };
    rivets.formatters['-'] = function(value, x) {
      return Number(value) - Number(x);
    };
    rivets.formatters['*'] = function(value, x) {
      return Number(value) * Number(x);
    };
    rivets.formatters['/'] = function(value, x) {
      return Number(value) / Number(x);
    };
    rivets.formatters['isArray'] = function(value) {
      return Array.isArray(value);
    };
    rivets.formatters['eachObject'] = function(obj) {
      var data, k, results, v;
      if (false === util.isObject(obj)) {
        return [];
      }
      data = [];
      results = [];
      for (k in obj) {
        v = obj[k];
        results.push(data.push({
          key: k,
          value: v
        }));
      }
      return results;
    };
    rivets.formatters['toFixed'] = function(value, len) {
      if (len == null) {
        len = 1;
      }
      if (false === util.isNumber(value)) {
        return 0;
      }
      return Number(value).toFixed(len);
    };
    rivets.formatters['in'] = function() {
      var args, value;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (args.length < 2) {
        return false;
      }
      value = args[0];
      args.splice(0, 1);
      if (util.isNumber(value)) {
        value = Number(value);
      }
      return args.indexOf(value) !== -1;
    };

    /**
     * 模板渲染
     * @param {Object} view
     * @param {jQuery} view.$el
     * @param {Function} view.set
     * @param {Object} data
     */
    Template = function(view, data) {
      var dtd, keys, rv;
      this.view = view;
      if (data == null) {
        data = {};
      }
      keys = Object.keys(data);
      this.rv = false;
      dtd = $.Deferred();
      if (keys.length === 0) {
        rv = rivets.bind(this.view.$el, {
          self: this.view
        });
        this.rv = rv;
        dtd.resolve(rv);
      } else {
        Template.loadPromise(data).done((function(_this) {
          return function(vData) {
            keys.forEach(function(k) {
              var v;
              v = vData[k];
              if (v != null) {
                return _this.view.set(k, v);
              }
            });
            rv = rivets.bind(_this.view.$el, {
              self: _this.view
            });
            _this.rv = rv;
            dtd.resolve(rv);
          };
        })(this)).fail(function() {
          return dtd.reject();
        });
      }
      return dtd.promise();
    };
    Template.prototype.set = function(key, promise) {
      return promise.then((function(_this) {
        return function(val) {
          return _this.view.set(key, val);
        };
      })(this));
    };
    Template.prototype.update = function(data) {
      var dtd, keys;
      if (data == null) {
        data = {};
      }
      dtd = $.Deferred();
      if (false === this.rv) {
        dtd.reject('Template no init');
      } else {
        keys = Object.keys(data);
        Template.loadPromise(data).done((function(_this) {
          return function(vData) {
            keys.forEach(function(k) {
              var v;
              v = vData[k];
              if (v != null) {
                return _this.view.set(k, v);
              }
            });
            dtd.resolve;
          };
        })(this)).fail(function() {
          return dtd.reject();
        });
      }
      return dtd.promise();
    };
    Template.prototype.destroy = function() {
      if (this.rv) {
        return this.rv.unbind();
      }
    };
    Template.loadPromise = function(data) {
      var dtd, keys, promises;
      dtd = $.Deferred();
      keys = Object.keys(data);
      if (keys.length === 0) {
        dtd.resolve({});
      } else {
        if (keys.length === 1) {
          promises = data[keys[0]];
        } else {
          promises = [];
          keys.forEach((function(_this) {
            return function(v) {
              return promises.push(data[v]);
            };
          })(this));
        }
        $.when(promises).done(function() {
          var args, vData;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          vData = {};
          args.forEach((function(_this) {
            return function(v, k) {
              var key;
              key = keys[k];
              if (key) {
                return vData[key] = v;
              }
            };
          })(this));
          return dtd.resolve(vData);
        }).fail(function() {
          return dtd.reject();
        });
      }
      return dtd.promise();
    };

    /**
     * 加载amd规范的模板，
     * 包名必须为 tpl/ 前缀
     */
    Template.loadTpl = function(uri) {
      var dtd, info;
      dtd = $.Deferred();
      info = uri.split('/');
      if (info.length === 2) {
        requirejs(["tpl/" + info[0]], function(tpl) {
          var html;
          html = tpl[info[1]];
          if (html) {
            return dtd.resolve(html);
          } else {
            return dtd.reject('url data map error');
          }
        });
      } else {
        dtd.reject('uri error');
      }
      return dtd.promise();
    };
    Template.render = function(uri, data, model) {
      var dtd, keys;
      if (data == null) {
        data = {};
      }
      keys = Object.keys(data);
      dtd = $.Deferred();
      if (keys.length > 0) {
        keys.forEach((function(_this) {
          return function(k) {
            return model.set(k, {});
          };
        })(this));
      }
      if (model.tpl) {
        model.tpl.update(data);
        dtd.resolve();
        model.emit('tplUpdate');
      } else {
        Template.loadTpl(uri).done(function(html) {
          model.$el.append(html);
          model.tpl = new Template(model, data);
          dtd.resolve();
          return model.emit('render');
        }).fail(function(err) {
          return dtd.reject(err || 'Template init error');
        });
      }
      return dtd.promise();
    };
    Template.formatters = function(name, fun) {
      return rivets.formatters[name] = fun;
    };
    Template.Attr = Stapes.subclass({
      constructor: function(name1, rv1, el1) {
        this.name = name1;
        this.rv = rv1;
        this.el = el1;
        this.$el = $(this.el);
        return this.init(this.el);
      },
      sync: function(value) {
        return this.rv.observer.setValue(value);
      },
      init: function(el) {},
      update: function(value, el) {},
      destroy: function(el) {}
    });
    Template.regAttr = function(name, Attr) {
      var attr;
      attr = null;
      return rivets.binders[name] = {
        bind: function(el) {
          return attr = new Attr(name, this, el);
        },
        unbind: function(el) {
          return attr.destroy(el);
        },
        routine: function(el, value) {
          return attr.update(value, el);
        }
      };
    };
    Template.regTag = function(name, options) {
      if (options == null) {
        options = {};
      }
      return rivets.components[name] = {
        "static": options["static"] || [],
        attributes: options.attr || [],
        template: options.template || function() {
          return '';
        },
        initialize: options.init || function() {}
      };
    };
    return Template;
  });

}).call(this);
