// Generated by CoffeeScript 1.10.0

/**
 * 修改自 simple-virtual-dom
 * @date 2016-01-21 19:36:17
 */
'use strict';
var dfsWalk, diff, diffChildren, diffProps, each, isString, listDiff, patch, ref;

patch = require('./patch');

listDiff = require('list-diff2');

ref = require('./util'), isString = ref.isString, each = ref.each;

diff = function(oldTree, newTree) {
  var index, patches;
  index = 0;
  patches = {};
  dfsWalk(oldTree, newTree, index, patches);
  return patches;
};

dfsWalk = function(oldNode, newNode, index, patches) {
  var currentPatch, propsPatches;
  currentPatch = [];
  if (newNode === null) {

  } else if (isString(oldNode) && isString(newNode)) {
    if (newNode !== oldNode) {
      currentPatch.push({
        type: patch.TEXT,
        content: newNode
      });
    }
  } else if (oldNode.tagName === newNode.tagName && oldNode.key === newNode.key) {
    propsPatches = diffProps(oldNode, newNode);
    if (propsPatches) {
      currentPatch.push({
        type: patch.PROPS,
        props: propsPatches
      });
    }
    diffChildren(oldNode.children, newNode.children, index, patches, currentPatch);
  } else {
    currentPatch.push({
      type: patch.REPLACE,
      node: newNode
    });
  }
  if (currentPatch.length) {
    patches[index] = currentPatch;
  }
};

diffChildren = function(oldChildren, newChildren, index, patches, currentPatch) {
  var currentNodeIndex, diffs, leftNode, reorderPatch;
  diffs = listDiff(oldChildren, newChildren, 'key');
  newChildren = diffs.children;
  if (diffs.moves.length) {
    reorderPatch = {
      type: patch.REORDER,
      moves: diffs.moves
    };
    currentPatch.push(reorderPatch);
  }
  leftNode = null;
  currentNodeIndex = index;
  each(oldChildren, function(child, i) {
    var newChild;
    newChild = newChildren[i];
    currentNodeIndex = leftNode && leftNode.count ? currentNodeIndex + leftNode.count + 1 : currentNodeIndex + 1;
    dfsWalk(child, newChild, currentNodeIndex, patches);
    leftNode = child;
  });
};

diffProps = function(oldNode, newNode) {
  var count, j, key, len, newProps, oldProps, propsPatches, value;
  count = 0;
  oldProps = oldNode.props;
  newProps = newNode.props;
  propsPatches = {};
  for (key in oldProps) {
    value = oldProps[key];
    if (newProps[key] !== value) {
      count++;
      propsPatches[key] = newProps[key];
    }
  }
  for (value = j = 0, len = newProps.length; j < len; value = ++j) {
    key = newProps[value];
    if (!oldProps.hasOwnProperty(key)) {
      count++;
      propsPatches[key] = newProps[key];
    }
  }
  if (count === 0) {
    return null;
  }
  return propsPatches;
};

module.exports = diff;
