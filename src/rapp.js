// Generated by CoffeeScript 1.9.3

/**
 *
 * @module mcore/rapp
 * @author vfasky <vfasky@gmail.com>
 */

(function() {
  define('mcore/rapp', ['react', 'mcore/route', 'mcore/rtemplate', 'mcore/class'], function(React, route, Template, EventClass) {
    "use strict";
    var App;
    App = EventClass.extend({
      initialize: function(mountNode, options) {
        this.mountNode = mountNode != null ? mountNode : document.body;
        this.options = options != null ? options : {};
        if (false === this.options.hasOwnProperty('routeChange')) {
          this.options.routeChange = route.Route.changeByLocationHash;
        }
        this.router = new route.Route(this.options.routeChange);
        this._middlewares = [];
        this.curView = null;
        this._onLoadViw = false;
      }
    });
    App.prototype.use = function(middleware) {
      this._middlewares.push(middleware);
      return this;
    };
    App.prototype.stack = function(ix, err, done) {
      var middleware, next, nextIx;
      if (ix == null) {
        ix = 0;
      }
      if (err == null) {
        err = null;
      }
      if (done == null) {
        done = function() {};
      }
      if (ix === this._middlewares.length) {
        return this._runView(done);
      }
      middleware = this._middlewares[ix];
      nextIx = ix + 1;
      next = (function(_this) {
        return function(err) {
          return _this.stack(nextIx, err, done);
        };
      })(this);
      this.env.View = this.curView;
      return middleware.call(this.env, err, next);
    };
    App.prototype.runMiddlewares = function(done) {
      if (done == null) {
        done = function() {};
      }
      if (this._middlewares.length === 0) {
        return this._runView(done);
      }
      return this.stack(0, null, done);
    };
    App.prototype.route = function(path, viewName) {
      var self;
      self = this;
      this.router.add(path, function() {
        return self.runView(viewName, this, arguments);
      });
      return this;
    };
    App.prototype.render = function(View, data) {
      var AppView;
      AppView = React.createClass({
        displayName: 'App',
        render: (function(_this) {
          return function() {
            return React.createElement('div', null, React.createElement(View, {
              env: _this.env,
              args: _this.env.args,
              context: _this.env.context,
              data: data
            }));
          };
        })(this)
      });
      return this.emit('render', Template.render(AppView, null, this.mountNode));
    };
    App.prototype._runView = function(done) {
      var view;
      if (done == null) {
        done = function() {};
      }
      view = this.curView();
      view.on('beforeRender', (function(_this) {
        return function() {
          return _this.emit('beforeRender');
        };
      })(this));
      return view.on('render', (function(_this) {
        return function(res) {
          return _this.render(res.View, res.data);
        };
      })(this));
    };
    App.prototype.runView = function(viewName, route, args) {
      if (this._onLoadViw) {
        return;
      }
      this._onLoadViw = true;
      this.env = {
        route: route,
        context: route.context,
        args: args,
        viewName: viewName,
        app: this
      };
      return requirejs([viewName], (function(_this) {
        return function(View) {
          _this.emit('runView', viewName);
          _this.curView = View;
          return _this.runMiddlewares(function() {
            return _this._onLoadViw = false;
          });
        };
      })(this));
    };
    App.prototype.run = function() {
      return this.router.run();
    };
    return App;
  });

}).call(this);
