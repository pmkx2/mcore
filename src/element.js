// Generated by CoffeeScript 1.10.0

/**
 * 修改自 simple-virtual-dom 
 * @date 2016-01-21 19:34:48
 */
'use strict';
var Element, Template, _id, each, ref, setElementAttr,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_id = 0;

Template = require('./template');

ref = require('./util'), setElementAttr = ref.setElementAttr, each = ref.each;

Element = (function() {
  function Element(tagName, props, children) {
    var count;
    this.props = props != null ? props : {};
    this.children = children != null ? children : [];
    this.tagName = tagName.toLowerCase();
    this._id = _id++;
    this._binders = [];
    this._bindersReg = [];
    this._component = null;
    this.key = this.props.key || void 0;
    count = 0;
    each(this.children, (function(_this) {
      return function(child, i) {
        if (child instanceof Element) {
          count += child.count;
        } else {
          _this.children[i] = String(child);
        }
        return count++;
      };
    })(this));
    this.count = count;
  }

  Element.prototype.render = function() {
    var attr, el, ref1, value;
    el = this.bindComponent();
    if (false === el) {
      el = document.createElement(this.tagName);
      if (this.template) {
        el._element = this;
        this.el = el;
      }
      ref1 = this.props;
      for (attr in ref1) {
        value = ref1[attr];
        this.setAttribute(el, attr, value);
      }
      each(this.children, function(child) {
        var childEl;
        if (child instanceof Element) {
          childEl = child.render();
        } else {
          childEl = document.createTextNode(child);
        }
        return el.appendChild(childEl);
      });
    }
    return el;
  };

  Element.prototype.removeAttribute = function(attrName) {
    var binder, j, len, ref1;
    attrName = attrName.toLowerCase();
    if (this._component) {
      this._component.update(attrName, null);
    }
    ref1 = this._binders;
    for (j = 0, len = ref1.length; j < len; j++) {
      binder = ref1[j];
      if (binder.attrName === attrName) {
        if (binder.binder.remove) {
          binder.binder.remove.call(this, this.el);
        }
        binder.value = null;
        return;
      }
    }
    return this.el.removeAttribute(attrName);
  };

  Element.prototype.destroy = function() {
    var attrName, event, results;
    if (!this.template) {
      return;
    }
    if (this._component) {
      this._component.destroy();
    }
    results = [];
    for (attrName in this.props) {
      if (attrName.indexOf('on-') === 0) {
        event = attrName.replace('on-', '');
        results.push(this.template.removeEvent(event, this.el, this._id));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Element.prototype.setAttribute = function(el, attrName, value) {
    var binder, j, len, ref1;
    attrName = String(attrName).toLowerCase();
    if (this._component) {
      this._component.update(attrName, value);
    }
    if (this.template) {
      if (attrName.indexOf('on-') === 0) {
        this.template.addEvent(attrName.replace('on-', ''), el, value, this._id);
        return;
      }
      ref1 = this._binders;
      for (j = 0, len = ref1.length; j < len; j++) {
        binder = ref1[j];
        if (binder.attrName === attrName) {
          if (indexOf.call(this._bindersReg, attrName) < 0) {
            this._bindersReg.push(attrName);
            if (binder.binder.init) {
              binder.binder.init.call(this, el);
            }
          }
          if (binder.binder.update) {
            binder.binder.update.call(this, el, value);
          } else {
            binder.binder.call(this, el, value);
          }
          binder.value = value;
          return;
        }
      }
    }
    return setElementAttr(el, attrName, value, true);
  };

  Element.prototype.bindComponent = function() {
    var attr, el, ref1, value;
    if (false === Template.components.hasOwnProperty(this.tagName)) {
      return false;
    }
    el = document.createElement(this.tagName);
    this._component = new Template.components[this.tagName](el, this);
    ref1 = this.props;
    for (attr in ref1) {
      value = ref1[attr];
      this.setAttribute(el, attr, value);
    }
    el._element = this;
    el._component = this._component;
    return el;
  };

  Element.prototype.bindBinder = function(attrName, value) {
    if (Template.binders.hasOwnProperty(attrName)) {
      return this._binders.push({
        binder: Template.binders[attrName],
        value: value,
        attrName: attrName.toLowerCase()
      });
    }
  };

  Element.prototype.bindTemplate = function(template) {
    this.template = template;
  };

  return Element;

})();

module.exports = Element;
