// Generated by CoffeeScript 1.9.3

/**
 * 路由
 * @module mcore/route
 * @author vfasky <vfasky@gmail.com>
 * @example 
 * route = new mcore.Route()
 *
 * route.add '/index/:id', (id)->
 *     console.log id
 *
 * route.add '/show/*', (name)->
 *     console.log name
 * 
 * route.add '/get/:id?', (id)->
 *     console.log id # or undefined
 * 
 * route.add 'user user/:id', (id)->
 *     console.log route.lookup('user', id:1) #/user/1
 *
 * route.run()
 */

(function() {
  define('mcore/route', function() {
    "use strict";
    var Route, pathToRegexp;
    pathToRegexp = function(path, keys, sensitive, strict) {
      var toKeys;
      if (keys == null) {
        keys = [];
      }
      if (sensitive == null) {
        sensitive = false;
      }
      if (strict == null) {
        strict = false;
      }
      if (path instanceof RegExp) {
        return path;
      }
      toKeys = function(_, slash, format, key, capture, optional) {
        keys.push({
          name: key,
          optional: !!optional
        });
        slash = slash || '';
        return '' + (optional && '' || slash) + '(?:' + (optional && slash || '') + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')' + (optional || '');
      };
      path = path.concat(strict && '' || '/?').replace(/\/\(/g, '(?:/').replace(/\+/g, '__plus__').replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?/g, toKeys).replace(/([\/.])/g, '\\$1').replace(/__plus__/g, '(.+)').replace(/\*/g, '(.*)');
      return new RegExp('^' + path + '$', sensitive && '' || 'i');
    };

    /**
     * 路由
     */
    Route = function(hashchange, sensitive1, strict1) {
      this.hashchange = hashchange != null ? hashchange : Route.changeByLocationHash;
      this.sensitive = sensitive1 != null ? sensitive1 : false;
      this.strict = strict1 != null ? strict1 : false;
      this.rule = [];
    };
    Route.prototype.add = function(path, fn) {
      var key, reg;
      key = [];
      reg = pathToRegexp(path, key, this.sensitive, this.strict);
      this.rule.push({
        path: path,
        reg: reg,
        key: key,
        fn: fn
      });
    };
    Route.prototype.urlToObject = function(url) {
      var argStr, attr;
      url = String(url);
      argStr = '';
      attr = [];
      if (url.indexOf('?') !== -1) {
        argStr = url.split('?').pop();
      } else if (url.indexOf('&') !== -1) {
        argStr = url.split('&').pop();
      }
      if (argStr === '') {
        return {};
      }
    };
    Route.changeByLocationHash = function(emit) {
      var hashChanged;
      hashChanged = function() {
        return emit(window.location.hash.substring(1));
      };
      if (window.addEventListener) {
        return window.addEventListener('hashchange', hashChanged, false);
      } else {
        return window.attachEvent('onhashchange', hashChanged);
      }
    };
    return {
      pathToRegexp: pathToRegexp,
      Route: Route
    };
  });

}).call(this);
