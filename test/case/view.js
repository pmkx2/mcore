// Generated by CoffeeScript 1.9.3

/**
 * view test
 * @module case/view
 * @author vfasky <vfasky@gmail.com>
 */

(function() {
  define('case/view', ['describe', 'it', 'mcore/view', 'assert', 'jquery', 'mcore/template'], function(describe, it, View, assert, $, Template) {
    "use strict";
    return describe('test view and template', function() {
      it('hello', function(done) {
        var $el, TestView, testView;
        TestView = View.subclass({
          constructor: View.prototype.constructor,
          run: function() {
            return this.render('test/t1');
          }
        });
        $el = $('<div/>');
        testView = new TestView($el);
        testView.on('render', function() {
          assert.equal(true, $el.text().trim() === 'hello');
          return done();
        });
        return testView.run();
      });
      it('each', function(done) {
        var $el, $parent, TestView, testView;
        TestView = View.subclass({
          constructor: View.prototype.constructor,
          run: function() {
            return this.render('test/t2', {
              testData: [0, 1, 2, 3, 4]
            });
          }
        });
        $el = $('<div/>');
        $parent = $('<div />');
        $el.appendTo($parent);
        testView = new TestView($el);
        testView.on('render', function() {
          assert.equal(true, testView.$el.find('.t1').length === 5);
          return done();
        });
        return testView.run();
      });
      it('promise data', function(done) {
        var $el, TestView, testView;
        TestView = View.subclass({
          constructor: View.prototype.constructor,
          run: function() {
            return this.render('test/t2', {
              testData: this.getData()
            });
          },
          getData: function() {
            var dtd;
            dtd = $.Deferred();
            dtd.resolve([0, 1, 2, 3, 4]);
            return dtd.promise();
          }
        });
        $el = $('<div/>');
        testView = new TestView($el);
        testView.on('render', function() {
          assert.equal(true, $el.find('.t1').length === 5);
          return done();
        });
        return testView.run();
      });
      it('template diy attr', function(done) {
        var $el, TestView, testView;
        Template.regAttr('test', Template.Attr.subclass({
          constructor: Template.Attr.prototype.constructor,
          init: function(el) {
            return $(el).html('diy');
          }
        }));
        TestView = View.subclass({
          constructor: View.prototype.constructor,
          run: function() {
            return this.render('test/t3');
          }
        });
        $el = $('<div/>');
        testView = new TestView($el);
        testView.on('render', function() {
          assert.equal(true, $el.text().trim() === 'diy');
          return done();
        });
        return testView.run();
      });
      it('template 2way attr', function(done) {
        var $el, TestView, testView;
        Template.regAttr('test', Template.Attr.subclass({
          constructor: Template.Attr.prototype.constructor,
          init: function(el) {
            return $(el).html('diy');
          },
          update: function(value) {
            return this.sync('ok');
          }
        }));
        TestView = View.subclass({
          constructor: View.prototype.constructor,
          run: function() {
            return this.render('test/t4', {
              t: 0
            });
          }
        });
        $el = $('<div/>');
        testView = new TestView($el);
        testView.on('change:t', function(val) {
          if (val === 'ok') {
            return done();
          }
        });
        return testView.run();
      });
      return it('template components', function(done) {
        var $el, TestView, testView;
        Template.regTag('test', {
          attr: 'list',
          template: function() {
            return '<div rv-each-v="list" class="t5">{v}</div>';
          },
          init: function(el, data) {
            return data;
          }
        });
        TestView = View.subclass({
          constructor: View.prototype.constructor,
          run: function() {
            return this.render('test/t5', {
              data: [0, 1, 2, 3, 4]
            });
          },
          changeData: function() {
            return this.set('data', [0, 1, 2]);
          }
        });
        $el = $('<div/>');
        testView = new TestView($el);
        testView.on('render', function() {
          assert.equal(5, $el.find('.t5').length);
          testView.changeData();
          if ($el.find('.t5').length === 3) {
            return done();
          }
        });
        return testView.run();
      });
    });
  });

}).call(this);
