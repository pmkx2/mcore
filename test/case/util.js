// Generated by CoffeeScript 1.9.3

/**
 * 测试util 
 * @date 2015-08-24 22:01:12
 * @author vfasky <vfasky@gmail.com>
 * @link http://vfasky.com
 * @version $Id$
 */

(function() {
  define('case/util', ['describe', 'it', 'mcore/util', 'assert'], function(describe, it, util, assert) {
    describe('util isNumber', function() {
      it('123', function() {
        return assert.equal(true, util.isNumber(123));
      });
      it('"123"', function() {
        return assert.equal(true, util.isNumber('123'));
      });
      it('-123', function() {
        return assert.equal(true, util.isNumber(-123));
      });
      it('"123"', function() {
        return assert.equal(true, util.isNumber('-123'));
      });
      it('-123.234', function() {
        return assert.equal(true, util.isNumber(-123.234));
      });
      it('"123.234"', function() {
        return assert.equal(true, util.isNumber('-123.234'));
      });
      it('12a is false', function() {
        return assert.equal(false, util.isNumber('12a'));
      });
      it('+123 is false', function() {
        return assert.equal(false, util.isNumber('+123'));
      });
      return it('123.456.789 is false', function() {
        return assert.equal(false, util.isNumber('123.456.789'));
      });
    });
    describe('util isObject', function() {
      it('123 is false', function() {
        return assert.equal(false, util.isObject(123));
      });
      it('{} is true', function() {
        return assert.equal(true, util.isObject({}));
      });
      it('{ key: 123 } is true', function() {
        return assert.equal(true, util.isObject({
          key: 123
        }));
      });
      return it('function test(){} is false', function() {
        var test;
        test = function() {};
        return assert.equal(false, util.isObject(test));
      });
    });
    return describe('util each', function() {
      it('[1,2,3,4,5]', function() {
        var total;
        total = '';
        util.each([1, 2, 3, 4, 5], function(v) {
          return total += v;
        });
        return assert.equal('12345', total);
      });
      return it('[1,2,3,4,5] > 3 break', function() {
        var total;
        total = '';
        util.each([1, 2, 3, 4, 5], function(v, k) {
          if (k >= 3) {
            return false;
          }
          return total += v;
        });
        return assert.equal('123', total);
      });
    });
  });

}).call(this);
