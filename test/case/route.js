// Generated by CoffeeScript 1.9.3

/**
 * 测试路由
 * @module case/route
 * @author vfasky <vfasky@gmail.com>
 */

(function() {
  define('case/route', ['describe', 'it', 'mcore/route', 'assert'], function(describe, it, route, assert) {
    "use strict";
    describe('route test pathToObject', function() {
      it('?id=4&v=ttt', function() {
        var data;
        data = route.pathToObject('/test?id=4&v=ttt');
        return assert.equal(JSON.stringify(data), JSON.stringify({
          id: 4,
          v: 'ttt'
        }));
      });
      return it('&id=5&b=c&c1 =d', function() {
        var data;
        data = route.pathToObject('/test/vvv/&id=5&b=c&c1 =d');
        return assert.equal(JSON.stringify(data), JSON.stringify({
          id: 5,
          b: 'c',
          c1: 'd'
        }));
      });
    });
    describe('route test pathToRegexp', function() {
      it('/index/:id/:v', function() {
        var data, i, k, key, ref, ref1, reg, v;
        key = [];
        reg = route.pathToRegexp('/index/:id/:v', key);
        assert.equal(null, reg.exec('/index/12'));
        ref = reg.exec('/index/12/13');
        data = {};
        for (v = i = 1, ref1 = ref.length; 1 <= ref1 ? i < ref1 : i > ref1; v = 1 <= ref1 ? ++i : --i) {
          k = key[v - 1];
          if (k) {
            data[k.name] = Number(ref[v]);
          }
        }
        return assert.equal(JSON.stringify(data), JSON.stringify({
          id: 12,
          v: 13
        }));
      });
      it('/index/:id?/:v', function() {
        var key, reg;
        key = [];
        reg = route.pathToRegexp('/index/:id?/:v', key);
        return assert.equal(true, Array.isArray(reg.exec('/index//12')));
      });
      return it('/show/*', function() {
        var key, reg;
        key = [];
        reg = route.pathToRegexp('/show/*', key);
        return assert.equal(2, reg.exec('/show/sf/sdf/').length);
      });
    });
    return describe('route test Route::match', function() {
      var ru;
      ru = new route.Route();
      it('/show/:id', function(done) {
        ru.add('/show/:id', function(id) {
          assert.equal(2, id);
          return done();
        });
        return ru.match('/show/2');
      });
      it('/show2/:id context', function(done) {
        ru.add('/show2/:id', function(id) {
          assert.equal(2, id);
          assert.equal(2, this.data.id);
          assert.equal(3, this.context.v);
          assert.equal(this.url, '/show2/2?v=3');
          return done();
        });
        ru.match('/show2/2?v=3');
        ru.add('/show0/:id', function(id) {
          assert.equal(2, id);
          assert.equal(2, this.data.id);
          assert.equal(3, this.context.v);
          assert.equal(this.url, '/show0/2&v=3');
          return done();
        });
        return ru.match('/show0/2&v=3');
      });
      it('/show3/:id?', function(done) {
        ru.add('/show3/:id?', function(id) {
          assert.equal(null, id);
          return done();
        });
        return ru.match('/show3/');
      });
      it('/show4/:id?/:v', function(done) {
        ru.add('/show4/:id?/:v', function(id, v) {
          assert.equal(null, id);
          assert.equal(7, v);
          return done();
        });
        ru.add('/show4/:id?/:v', function(id, v) {
          return done('重复配对');
        });
        return ru.match('/show4//7');
      });
      return it('/show5/*', function(done) {
        ru.add('/show5/*', function(id) {
          assert.equal('7/8/9', id);
          return done();
        });
        return ru.match('/show5/7/8/9');
      });
    });
  });

}).call(this);
