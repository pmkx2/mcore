// Generated by CoffeeScript 1.10.0

/**
 * 表单验证
 * @module mcore-attr/validator
 * @author vfasky <vfasky@gmail.com>
 */
"use strict";
var $, Template, ValidatorAttr, _isAlphabetReg, _isDateReg, _isEmailReg, _isIDReg, _isMobileReg, _isTelReg, errMsg, exports, mcore, rule, urlCheck, util,
  slice = [].slice;

$ = require('jquery');

mcore = require('mcore');

require('formSerializer');

Template = mcore.Template;

util = mcore.util;

_isAlphabetReg = /^[A-Za-z]+$/;

_isEmailReg = /^(?:[a-z0-9]+[_\-+.]+)*[a-z0-9]+@(?:([a-z0-9]+-?)*[a-z0-9]+.)+([a-z]{2,})+$/i;

_isDateReg = /^([1-2]\d{3})([-\/.])?(1[0-2]|0?[1-9])([-\/.])?([1-2]\d|3[01]|0?[1-9])$/;

_isMobileReg = /^1[3-9]\d{9}$/;


/**
 * 检查座机
 * 座机：仅中国座机支持；区号可有 3、4位数并且以 0 开头；电话号不以 0 开头，最 8 位数，最少 7 位数
 * 但 400/800 除头开外，适应电话，电话本身是 7 位数
 * 0755-29819991 | 0755 29819991 | 400-6927972 | 4006927927 | 800...
 *
 */

_isTelReg = /^(?:(?:0\d{2,3}[- ]?[1-9]\d{6,7})|(?:[48]00[- ]?[1-9]\d{6}))$/;

_isIDReg = /^\d{6}(18|19|20)?\d{2}(0[1-9]|1[12])(0[1-9]|[12]\d|3[01])\d{3}(\d|X)$/i;

urlCheck = (function() {
  var address, domain, domainType, ip, ipType, port, protocols, rDomain, rIP, userInfo;
  protocols = '((https?|s?ftp|irc[6s]?|git|afp|telnet|smb):\\/\\/)?';
  userInfo = '([a-z0-9]\\w*(\\:[\\S]+)?\\@)?';
  domain = '(?:localhost|(?:[a-z0-9]+(?:[-\\w]*[a-z0-9])?(?:\\.[a-z0-9][-\\w]*[a-z0-9])*)*\\.[a-z]{2,})';
  port = '(:\\d{1,5})?';
  ip = '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}';
  address = '(\\/\\S*)?';
  domainType = [protocols, userInfo, domain, port, address];
  ipType = [protocols, userInfo, ip, port, address];
  rDomain = new RegExp('^' + domainType.join('') + '$', 'i');
  rIP = new RegExp('^' + ipType.join('') + '$', 'i');
  return function(x) {
    return rDomain.test(x || rIP.test(x));
  };
})();

errMsg = {
  required: '不能为空',
  isNumber: '只能是数字',
  isAlphabet: '只能是字母',
  minlength: function(len) {
    return "最小 " + len + " 位字符";
  },
  maxlength: function(len) {
    return "最多 " + len + " 位字符";
  },
  min: function(min) {
    return "数值要大于 " + min;
  },
  max: function(max) {
    return "数值要小于 " + max;
  },
  equals: '两次输入的值不相符',
  isEmail: '邮箱格式不正确',
  isInteger: '数值必须是整数',
  isDate: '日期格式不正确',
  isMobile: '手机格式不正确',
  isTel: '座机格式不正确',
  isIdentityCode: '身份证号格式错误'
};

rule = {
  required: function(x) {
    if (x == null) {
      x = '';
    }
    return String(x).trim().length > 0;
  },
  isAlphabet: function(x) {
    return _isAlphabetReg.test(String(x));
  },
  minlength: function(x, len) {
    len = Number(len);
    x = String(x).trim();
    return x.length >= len;
  },
  maxlength: function(x, len) {
    len = Number(len);
    x = String(x).trim();
    return x.length < len;
  },
  isNumber: function(x) {
    return $.isNumeric(String(x));
  },
  isInteger: function(x) {
    return Number(x) % 1 === 0;
  },
  min: function(x, min) {
    return Number(x) >= Number(min);
  },
  max: function(x, max) {
    return Number(x) <= Number(max);
  },
  equals: function(x, value) {
    if (value instanceof $) {
      value = value.val();
    }
    if (x instanceof $) {
      x = x.val();
    }
    return String(x) === String(value);
  },
  isEmail: function(x) {
    return _isEmailReg.test(String(x));
  },
  isDate: function(x) {
    var d, day, month, taste, year;
    if (_isDateReg.test(String(x))) {
      return false;
    }
    taste = _isDateReg.exec(String(x));
    year = Number(taste[1]);
    month = Number(taste[3] - 1);
    day = Number(taste[5]);
    d = new Date(year, month, day);
    return year === d.getFullYear() && month === d.getMonth() && day === d.getDate();
  },
  isMobile: function(x) {
    return _isMobileReg.test(String(x));
  },
  isTel: function(x) {
    return _isTelReg.test(String(x));
  },
  isIdentityCode: function(x) {
    var ai, cisy, code, factor, i, j, last, parity, sum, wi;
    x = String(x).replace('x', 'X');
    cisy = {
      11: "北京",
      12: "天津",
      13: "河北",
      14: "山西",
      15: "内蒙古",
      21: "辽宁",
      22: "吉林",
      23: "黑龙江",
      31: "上海",
      32: "江苏",
      33: "浙江",
      34: "安徽",
      35: "福建",
      36: "江西",
      37: "山东",
      41: "河南",
      42: "湖北",
      43: "湖南",
      44: "广东",
      45: "广西",
      46: "海南",
      50: "重庆",
      51: "四川",
      52: "贵州",
      53: "云南",
      54: "西藏",
      61: "陕西",
      62: "甘肃",
      63: "青海",
      64: "宁夏",
      65: "新疆",
      71: "台湾",
      81: "香港",
      82: "澳门",
      91: "国外"
    };
    if (_isIDReg.test(x)) {
      return false;
    }
    if (!cisy[x.substr(0, 2)]) {
      return false;
    }
    if (x.length === 18) {
      code = x.split('');
      factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
      parity = [1, 0, 'X', 9, 8, 7, 6, 5, 4, 3, 2];
      sum = 0;
      ai = 0;
      wi = 0;
      for (i = j = 0; j < 17; i = ++j) {
        ai = code[i];
        wi = factor[i];
        sum += ai * wi;
      }
      last = parity[sum % 11];
      if (last !== code[17]) {
        return false;
      }
    }
    return true;
  },
  isUrl: function(x) {
    return urlCheck(String(x));
  }
};


/**
 * 验证表单
 * @author vfasky <vfasky@gmail.com>
 */

ValidatorAttr = Template.Attr.subclass({
  constructor: Template.Attr.prototype.constructor,
  init: function() {
    if (this.$el.is('form') === false) {
      return false;
    }
    return this.$el.data('check', (function(_this) {
      return function() {
        _this.initRules();
        return _this.check();
      };
    })(this));
  },
  update: function(value) {
    if (this.$el.is('form')) {
      return;
    }
    if (value) {
      return this.$el.attr('validator', value);
    } else {
      return this.$el.removeAttr('validator');
    }
  },
  check: function() {
    var $form, data, errFun, isPass;
    isPass = true;
    data = this.$el.serializeObject();
    errFun = null;
    $form = this.$el;
    $.each(this.rules, function(k, v) {
      var $el, _value, value;
      if (v.type !== 'required' && (data[v.name] === '' || data[v.name] === void 0)) {
        return;
      }
      _value = data[v.name];
      $el = v.args[0];
      value = {
        toString: function() {
          return String(_value);
        },
        toNumber: function() {
          return Number(_value);
        },
        $el: $el
      };
      v.args[0] = value;
      if (false === v.rule.apply(null, v.args)) {
        errFun = function() {
          return {
            $el: $el,
            err: v.err,
            $form: $form
          };
        };
        isPass = false;
        return false;
      }
    });
    return isPass && data || errFun;
  },
  initRules: function() {
    var self;
    self = this;
    this.rules = [];
    this.$validators = this.$el.find('[validator]');
    return this.$validators.each(function() {
      return self.parseValidator($(this));
    });
  },
  parseValidator: function($el) {
    var name;
    name = $el.attr('name');
    if (!name) {
      return;
    }
    return $el.attr('validator').split('|').forEach((function(_this) {
      return function(v) {
        var args, checkRule, diyErr, eT, err, ix, msgArgs, ruleType;
        ix = String(v).indexOf(' err:');
        if (ix !== -1) {
          eT = v.split(' err:');
          v = eT[0];
          diyErr = eT[1];
        }
        args = v.split(' ').filter(function(s) {
          return $.trim(s).length > 0;
        });
        ruleType = args[0];
        checkRule = rule[ruleType];
        if (!checkRule) {
          console.log("validator rule: " + ruleType + " undefined");
          return;
        }
        if (diyErr) {
          err = diyErr;
        } else {
          if ($.isFunction(errMsg[ruleType])) {
            msgArgs = util.clone(args);
            msgArgs.splice(0, 1);
            err = errMsg[ruleType].apply(null, msgArgs);
          } else {
            err = errMsg[ruleType] || 'error';
          }
        }
        args[0] = $el;
        if (ruleType === 'equals') {
          args[1] = _this.$el.find(args[1]).eq(0);
        }
        return _this.rules.push({
          name: name,
          type: ruleType,
          rule: checkRule,
          args: args,
          err: err
        });
      };
    })(this));
  }
});

Template.regAttr('validator', ValidatorAttr);

exports = module.exports = {
  add: function(x, fun) {
    return rule[x] = fun;
  },
  check: function() {
    var args, type;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (args.length < 2) {
      return false;
    }
    type = args[0];
    args.splice(0, 1);
    if (!rule[type]) {
      return false;
    }
    return rule[type].apply(null, args);
  },
  addErrMsg: function(type, msg) {
    return errMsg[type] = msg;
  },
  ValidatorAttr: ValidatorAttr
};
