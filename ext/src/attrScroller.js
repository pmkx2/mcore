// Generated by CoffeeScript 1.10.0

/**
 * scroller
 * @module mcore-attr/scroller
 * @author vfasky <vfasky@gmail.com>
 */
"use strict";
var $, $doc, $win, Template, _id, docStyle, engine, helperElem, loadImg, mcore, perspectiveProperty, render, scroller, transformProperty, vendorPrefix;

$ = require('jquery');

scroller = require('scroller');

mcore = require('mcore');

Template = mcore.Template;

$win = $(window);

$doc = $(document);

docStyle = document.documentElement.style;

if (docStyle.hasOwnProperty('WebkitAppearance')) {
  engine = 'webkit';
} else if (docStyle.hasOwnProperty('MozAppearance')) {
  engine = 'gecko';
} else if (typeof navigator.cpuClass === 'string') {
  engine = 'trident';
} else if (window.opera && Object.prototype.toString.call(opera) === '[object Opera]') {
  engine = 'presto';
}

vendorPrefix = {
  webkit: 'Webkit',
  trident: 'ms',
  gecko: 'Moz',
  presto: 'O'
}[engine];

helperElem = document.createElement('div');

perspectiveProperty = vendorPrefix + 'Perspective';

transformProperty = vendorPrefix + 'Transform';

render = function(content) {
  if (helperElem.style.hasOwnProperty(perspectiveProperty)) {
    return function(left, top, zoom) {
      content.style[transformProperty] = "translate3d(" + (-left) + "px, " + (-top) + "px,0) scale(" + zoom + ")";
    };
  } else if (helperElem.style.hasOwnProperty(transformProperty)) {
    return function(left, top, zoom) {
      content.style[transformProperty] = "translate(" + (-left) + "px, " + (-top) + "px,0) scale(" + zoom + ")";
    };
  }
  return function(left, top, zoom) {
    content.style.marginLeft = left && (-left / zoom) + 'px' || '';
    content.style.marginTop = top && (-top / zoom) + 'px' || '';
    content.style.zoom = zoom || '';
  };
};

_id = 0;

loadImg = function(src, done) {
  var img;
  if (done == null) {
    done = function() {};
  }
  if (!src) {
    return done();
  }
  img = new Image();
  img.onload = done;
  img.onerror = done;
  return img.src = src;
};

Template.regAttr('scroller', Template.Attr.subclass({
  constructor: Template.Attr.prototype.constructor,
  init: function() {
    _id++;
    this.id = _id;
    this.scrollingY = this.$el.attr('data-scrolling-y') === 'yes';
    this.scrollingX = this.$el.attr('data-scrolling-x') === 'yes';
    if (this.scrollingX === this.scrollingY && this.scrollingX === false) {
      this.scrollingY = true;
    }
    this.height = Number(this.$el.attr('data-scrolling-height') || 0);
    this.width = Number(this.$el.attr('data-scrolling-width') || 0);
    this.loadImgTime = false;
    this.$el.wrap('<div class="scroller-wrap"></div>');
    this.$container = this.$el.parent().css({
      overflow: 'hidden',
      position: 'relative'
    });
    this.$el.css({
      position: 'absolute'
    });
    if (this.scrollingX === false) {
      this.$el.css({
        width: '100%'
      });
    }
    this.scroller = new scroller.Scroller(render(this.$el[0]), {
      scrollingX: this.scrollingX,
      scrollingY: this.scrollingY,
      zooming: false,
      locking: false
    });
    this.$el.data('scroller', this.scroller);
    this.soureSize = {
      width: 0,
      height: 0
    };
    this.size = {
      width: 0,
      height: 0
    };
    return this.resize();
  },
  update: function(value, el) {
    var $img, imgLen, loadTotal;
    this.$el = $(el);
    this.resize();
    $img = this.$el.find('img');
    imgLen = $img.length;
    if (imgLen > 0) {
      if (this.loadImgTime) {
        clearTimeout(this.loadImgTime);
      }
      loadTotal = 0;
      return this.loadImgTime = setTimeout((function(_this) {
        return function() {
          var self;
          self = _this;
          return $img.each(function() {
            return loadImg(this.src, function() {
              loadTotal++;
              if (loadTotal === imgLen) {
                return self.resize();
              }
            });
          });
        };
      })(this), 300);
    }
  },
  destroy: function() {
    this.$el.remove();
    return $win.off("touchmove.scroller" + this.id).off("touchend.scroller" + this.id).off("mousemove.scroller" + this.id).off("mouseup.scroller" + this.id).off("resize.scroller" + this.id);
  },
  getSoureHeight: function() {
    var height;
    height = 0;
    this.$el.children().each(function() {
      return height += $(this).outerHeight();
    });
    return height;
  },
  getSoureWidth: function() {
    var width;
    width = 0;
    this.$el.children().each(function() {
      return width += $(this).outerWidth();
    });
    return width;
  },
  watch: function() {
    var container, isTouch, mousedown, touchDown;
    container = this.$container[0];
    mousedown = false;
    touchDown = false;
    isTouch = false;
    this.on('touchend', (function(_this) {
      return function(data) {
        var e, vals;
        e = data.e;
        vals = data.vals;
        if (vals.top + _this.size.height > _this.soureSize.height) {
          return _this.$el.trigger('scrollend', e, _this);
        } else if (vals.top < 20) {
          return _this.$el.trigger('scrollstart', e, _this);
        }
      };
    })(this));
    container.addEventListener('touchstart', (function(_this) {
      return function(e) {
        isTouch = true;
        if (e.target.tagName.match(/input|textarea|select/i)) {
          return;
        }
        touchDown = true;
        _this.scroller.doTouchStart(e.touches, e.timeStamp);
        return false;
      };
    })(this), false);
    $win.on("touchmove.scroller" + this.id, (function(_this) {
      return function(event) {
        var e;
        e = event.originalEvent;
        _this.scroller.doTouchMove(e.touches, e.timeStamp, e.scale || 1);
        if (touchDown) {
          return e.preventDefault();
        }
      };
    })(this));
    $win.on("touchend.scroller" + this.id, (function(_this) {
      return function(event) {
        var e;
        isTouch = true;
        touchDown = false;
        e = event.originalEvent;
        _this.scroller.doTouchEnd(e.timeStamp);
        _this.emit('touchend', {
          e: e,
          vals: _this.scroller.getValues()
        });
      };
    })(this));
    container.addEventListener('mousedown', (function(_this) {
      return function(e) {
        if (isTouch) {
          return;
        }
        if (e.target.tagName.match(/input|textarea|select/i)) {
          return;
        }
        _this.scroller.doTouchStart([
          {
            pageX: e.pageX,
            pageY: e.pageY
          }
        ], e.timeStamp);
        return mousedown = true;
      };
    })(this), false);
    $win.on("mousemove.scroller" + this.id, (function(_this) {
      return function(event) {
        var e;
        if (isTouch) {
          return;
        }
        e = event.originalEvent;
        if (false === mousedown) {
          return;
        }
        _this.scroller.doTouchStart([
          {
            pageX: e.pageX,
            pageY: e.pageY
          }
        ], e.timeStamp);
        mousedown = true;
        return e.preventDefault();
      };
    })(this));
    $win.on("mouseup.scroller" + this.id, (function(_this) {
      return function(event) {
        var e;
        if (isTouch) {
          return;
        }
        e = event.originalEvent;
        if (false === mousedown) {
          return;
        }
        _this.scroller.doTouchEnd(e.timeStamp);
        _this.emit('touchend', {
          e: e,
          vals: _this.scroller.getValues()
        });
        return mousedown = false;
      };
    })(this));
    return $win.on("resize.scroller" + this.id, (function(_this) {
      return function() {
        return _this.resize();
      };
    })(this));
  },
  resize: function() {
    if (window.requestAnimationFrame) {
      return window.requestAnimationFrame((function(_this) {
        return function() {
          return _this._resize();
        };
      })(this));
    } else {
      return this._resize();
    }
  },
  _resize: function() {
    var _width, container, content, height, rect, sHeight, sWidth, width;
    container = this.$container[0];
    content = this.$el[0];
    rect = container.getBoundingClientRect();
    this.scroller.setPosition(rect.left + container.clientLeft, rect.top + container.clientTop);
    width = this.width || container.clientWidth;
    height = this.height || container.clientHeight;
    sWidth = content.offsetWidth;
    sHeight = content.offsetHeight;
    if (this.scrollingY && 0 === this.height) {
      height = $win.outerHeight() - rect.top;
    }
    if (this.scrollingY && sHeight < height) {
      sHeight = this.getSoureHeight();
      if (sHeight < height) {
        sHeight = height + 80;
      }
    }
    if (this.scrollingX && 0 === this.width) {
      _width = this.getSoureWidth() + 4;
      if (_width > sWidth) {
        sWidth = _width;
      }
      height = sHeight;
    }
    this.$container.css({
      width: width || '100%',
      height: height || '100%'
    });
    this.soureSize = {
      width: sWidth,
      height: sHeight
    };
    this.size = {
      width: this.$container.width(),
      height: this.$container.height()
    };
    if (this.scrollingY) {
      sHeight += 40;
    }
    return this.scroller.setDimensions(width, height, sWidth, sHeight);
  }
}));
