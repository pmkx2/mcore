// Generated by CoffeeScript 1.10.0

/**
 * 转换 html 到 virtual Dom 
 * @date 2016-01-08 20:12:21
 * @author vfasky <vfasky@gmail.com>
 * @link http://vfasky.com
 */
'use strict';
var buildNamespace, domToScript, forId, htmlparser, parseDom, parseTree, parserAttr, parserAttrFor;

htmlparser = require('htmlparser2');

buildNamespace = function(len) {
  var i;
  return ((function() {
    var j, ref, results;
    results = [];
    for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      results.push('');
    }
    return results;
  })()).join(' ');
};

forId = 0;


/* 
 * 解释 for
 */

parserAttrFor = function(code, dom, ix, children) {
  var _arr, _ix, _vName, fid, script;
  fid = forId++;
  script = '';
  if (code.indexOf(' in ') !== -1) {
    _ix = '__mc__$ix_';
    _arr = code.split(' in ').pop();
    _vName = code.split(' ')[0].replace(',', '');
    if (code.indexOf(',') !== -1) {
      _ix = code.split(',').pop().split(' in')[0].trim();
    }
    delete dom.attribs['mc-for'];
    script = (buildNamespace((ix + 1) * 4)) + "// for\n" + (buildNamespace((ix + 1) * 4)) + "var __mc__arr = " + _arr + " || [];\n" + (buildNamespace((ix + 1) * 4)) + "for(var " + _ix + "=0, len=__mc__arr.length; " + _ix + " < len; " + _ix + "++){\n" + (buildNamespace((ix + 1) * 4)) + "    var children_for_" + fid + " = [], attr = {};\n" + (buildNamespace((ix + 1) * 4)) + "    var " + _vName + " = __mc__arr[" + _ix + "];\n" + (buildNamespace((ix + 1) * 4)) + "    " + (parserAttr(dom.attribs, ix));
  }
  if (dom.children && dom.children.length > 0) {
    script += parseTree(dom.children, ix + 1, "children_for_" + fid);
  }
  return script += (buildNamespace((ix + 2) * 4)) + "tree.push( el('" + dom.name + "', attr, children_for_" + fid + ") );\n" + (buildNamespace((ix + 1) * 4)) + "}// end for \n";
};


/* 
 * 解释 for
 */

parserAttr = function(attribs, ix) {
  var attr, script;
  script = '';
  attr = Object.keys(attribs);
  attr.forEach(function(key) {
    var val;
    val = attribs[key];
    if (key.indexOf('mc-') === 0) {
      key = key.replace('mc-', '');
      return script += (buildNamespace((ix + 1) * 4)) + "attr['" + key + "'] = " + val + ";";
    } else {
      return script += (buildNamespace((ix + 1) * 4)) + "attr['" + key + "'] = '" + val + "';";
    }
  });
  return script + '\n';
};


/*
 * 解释dom结构，生成
 * (function(children){
 *     children.push(el('h1', {style: 'color: blue'}, ['simple virtal dom']));
 * }(children);
 */

parseDom = function(dom, ix, id) {
  var code, script, text;
  script = "\n" + (buildNamespace((ix + 1) * 4)) + "var children_" + id + " = [], attr = {};\n";
  if (dom.attribs && dom.attribs['mc-for']) {
    script += parserAttrFor(dom.attribs['mc-for'], dom, ix, "children_" + id);
    return script;
  }
  if (dom.attribs) {
    script += parserAttr(dom.attribs, ix);
  }
  if (dom.children && dom.children.length > 0 && ix < 3) {
    script += parseTree(dom.children, ix, "children_" + id);
  }
  if (dom.name) {
    script += "\n" + (buildNamespace((ix + 1) * 4)) + "tree.push( el('" + dom.name + "', attr, children_" + id + ") );";
  } else if (dom.type === 'text') {
    text = dom.data.trim();
    if (text.indexOf('{') === 0 && text[text.length - 1] === '}') {
      code = text.replace(/\{/g, '" + (').replace(/\}/g, ') + "');
      code = '"' + code + '"';
      script += "\n" + (buildNamespace((ix + 1) * 4)) + "tree.push( " + code + " );";
    } else {
      script += "\n" + (buildNamespace((ix + 1) * 4)) + "tree.push( '" + dom.data + "' );";
    }
  }
  return script;
};

parseTree = function(tree, ix, children) {
  var script;
  if (ix == null) {
    ix = 0;
  }
  if (children == null) {
    children = 'children_0';
  }
  script = "\n" + (buildNamespace((ix + 1) * 4)) + "(function(scope, tree){ //[start tree " + ix + "]\n";
  tree.forEach(function(dom, id) {
    if (dom.type !== 'text' || (dom.type === 'text' && dom.data.trim().length > 0)) {
      return script += "" + (parseDom(dom, ix + 1, id));
    }
  });
  script += "\n" + (buildNamespace((ix + 1) * 4)) + "})(scope, " + children + "); //[end tree " + ix + "]\n";
  return script;
};

domToScript = function(tree) {
  var script;
  script = "var mcore = require('mcore');\nvar el = mcore.virtualDom.el;\n \nmodule.exports = function(scope){\n    var children_0 = [];";
  script += "\n    " + (parseTree(tree));
  script += "\n    return el('div', {'class': 'mc-vd'}, children_0);\n};";
  return console.log(script);
};

module.exports = function(html) {
  var domTree;
  domTree = htmlparser.parseDOM(html);
  return domToScript(domTree);
};
